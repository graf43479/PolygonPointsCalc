//=============================================================================
//
// Code generated by [VAPS XT 4.0.1]
//
//=============================================================================

//=============================================================================
//                        I N C L U D E   F I L E S
//=============================================================================

#include "vxtBaseClsPolygonPointsCalc.h"
#include "vxtRTMathUtils.h"


#if VXT_CFG_INTROSPECTION_SUPPORT
vxtRTProperty vxtBaseClsPolygonPointsCalc::S_PROPS[]  = {
   vxtRTProperty("p1", P1_PROP, VXT_TYPE_INFO(vxtTypCoord)), 
   vxtRTProperty("p2", P2_PROP, VXT_TYPE_INFO(vxtTypCoord)), 
   vxtRTProperty("r1", R1_PROP, VXT_TYPE_INFO(vxtFloat)), 
   vxtRTProperty("r2", R2_PROP, VXT_TYPE_INFO(vxtFloat)), 
   vxtRTProperty("p00", P00_PROP, VXT_TYPE_INFO(vxtTypCoord)), 
   vxtRTProperty("p01", P01_PROP, VXT_TYPE_INFO(vxtTypCoord)), 
   vxtRTProperty("p10", P10_PROP, VXT_TYPE_INFO(vxtTypCoord)), 
   vxtRTProperty("p11", P11_PROP, VXT_TYPE_INFO(vxtTypCoord))
};
#endif

#if VXT_EDITOR_MODE
const vxtChar* vxtBaseClsPolygonPointsCalc::s_pDependentTypesDescriptor = "Coord=Struct(X:Float,Y:Float)";
#endif

#if VXT_CFG_DBG_ERROR_MESSAGE_SUPPORT || VXT_CFG_INTROSPECTION_SUPPORT
const vxtChar* const vxtBaseClsPolygonPointsCalc::CLASS_NAME = "PolygonPointsCalc";
#endif

//=========<vxtBaseClsPolygonPointsCalc::vxtBaseClsPolygonPointsCalc>==========
// 
//  Summary: Constructor of the 'vxtBaseClsPolygonPointsCalc' class.
// 
//  Return Value: None.
// 
//=============================================================================
vxtBaseClsPolygonPointsCalc::vxtBaseClsPolygonPointsCalc(const InitData &a_rInitData)
: vxtRTCodedCalculator()
, mp_p1(a_rInitData.mp_p1)
, mp_p2(a_rInitData.mp_p2)
, mp_r1(a_rInitData.mp_r1)
, mp_r2(a_rInitData.mp_r2)
, mp_p00(a_rInitData.mp_p00)
, mp_p01(a_rInitData.mp_p01)
, mp_p10(a_rInitData.mp_p10)
, mp_p11(a_rInitData.mp_p11)
{
}

//=========<vxtBaseClsPolygonPointsCalc::~vxtBaseClsPolygonPointsCalc>=========
// 
//  Summary: Destructor of the 'vxtBaseClsPolygonPointsCalc' class.
// 
//  Return Value: None.
// 
//=============================================================================
vxtBaseClsPolygonPointsCalc::~vxtBaseClsPolygonPointsCalc()
{
}

#if VXT_CFG_DBG_ERROR_MESSAGE_SUPPORT || VXT_CFG_INTROSPECTION_SUPPORT
//================<vxtBaseClsPolygonPointsCalc::pGetClassName>=================
// 
//  Summary: Gets the class name.
// 
//  Return Value: The class name.
// 
//=============================================================================
const vxtChar* vxtBaseClsPolygonPointsCalc::pGetClassName() const
{
   return CLASS_NAME;
}
#endif

#if VXT_CFG_INTROSPECTION_SUPPORT
//=================<vxtBaseClsPolygonPointsCalc::GetNumProps>==================
// 
//  Summary: Get the number of properties.
// 
//  Return Value: Number of properties.
// 
//=============================================================================
vxtUShort vxtBaseClsPolygonPointsCalc::GetNumProps() const
{
   return VXT_USHORT_ARRAY_SIZE(S_PROPS);
}
#endif

#if VXT_CFG_SET_PROPERTY_SUPPORT
//=================<vxtBaseClsPolygonPointsCalc::vSetProperty>=================
// 
//  Summary: Set part or all of the value of a property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetProperty(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   switch(a_rIds.GetFirstPropId())
   {
      case P1_PROP :
      {
         vSetp1Prop(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      case P2_PROP :
      {
         vSetp2Prop(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      case R1_PROP :
      {
         vSetr1Prop(a_rTopContext, a_rValue.GetFloat());
      }
      break;
      case R2_PROP :
      {
         vSetr2Prop(a_rTopContext, a_rValue.GetFloat());
      }
      break;
      case P00_PROP :
      {
         vSetp00Prop(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      case P01_PROP :
      {
         vSetp01Prop(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      case P10_PROP :
      {
         vSetp10Prop(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      case P11_PROP :
      {
         vSetp11Prop(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      default :
      {
         // Error: invalid prop id
      }
   }
}
#endif

#if VXT_CFG_OBJECT_GET_PROPERTY_SUPPORT
//=================<vxtBaseClsPolygonPointsCalc::GetProperty>==================
// 
//  Summary: Get part or all of the value of a property.
// 
//  Return Value: Part or all of the value of a property.
// 
//=============================================================================
vxtRTValue vxtBaseClsPolygonPointsCalc::GetProperty(const vxtRTPropIdPath &a_rIds)
{
   vxtRTValue Ret;

   switch(a_rIds.GetFirstPropId())
   {
      case P1_PROP :
      {
         Ret = mp_p1.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      case P2_PROP :
      {
         Ret = mp_p2.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      case R1_PROP :
      {
         Ret = vxtRTValue(mp_r1);
      }
      break;
      case R2_PROP :
      {
         Ret = vxtRTValue(mp_r2);
      }
      break;
      case P00_PROP :
      {
         Ret = mp_p00.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      case P01_PROP :
      {
         Ret = mp_p01.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      case P10_PROP :
      {
         Ret = mp_p10.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      case P11_PROP :
      {
         Ret = mp_p11.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      default :
      {
         // The default Ret is invalid (pGetData() returns VXT_NULL)
      }
   }
   return Ret;
}
#endif

//==============<vxtBaseClsPolygonPointsCalc::HasUpdateFunction>===============
// 
//  Summary: This function must exist if vUpdate member function has a body.
// 
//  Return Value: VXT_TRUE.
// 
//=============================================================================
vxtBool vxtBaseClsPolygonPointsCalc::HasUpdateFunction()
{
   return VXT_TRUE;
}

//==================<vxtBaseClsPolygonPointsCalc::vSetp1Prop>==================
// 
//  Summary: Set the value of the 'p1' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp1Prop(const vxtRTTopContext &, const vxtTypCoord &a_rp1)
{
   vxtBool Changed = VXT_FALSE;
   mp_p1.vAssign(a_rp1, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//==================<vxtBaseClsPolygonPointsCalc::vSetp1Prop>==================
// 
//  Summary: Set the value of the 'p1' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp1Prop(const vxtRTTopContext &, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_p1.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//==================<vxtBaseClsPolygonPointsCalc::vSetp2Prop>==================
// 
//  Summary: Set the value of the 'p2' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp2Prop(const vxtRTTopContext &, const vxtTypCoord &a_rp2)
{
   vxtBool Changed = VXT_FALSE;
   mp_p2.vAssign(a_rp2, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//==================<vxtBaseClsPolygonPointsCalc::vSetp2Prop>==================
// 
//  Summary: Set the value of the 'p2' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp2Prop(const vxtRTTopContext &, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_p2.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//==================<vxtBaseClsPolygonPointsCalc::vSetr1Prop>==================
// 
//  Summary: Set the value of the 'r1' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetr1Prop(const vxtRTTopContext &, vxtFloat a_r1)
{
   if (mp_r1 != a_r1)
   {
      mp_r1 = a_r1;
      vRequireUpdate();
   }
}

//==================<vxtBaseClsPolygonPointsCalc::vSetr2Prop>==================
// 
//  Summary: Set the value of the 'r2' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetr2Prop(const vxtRTTopContext &, vxtFloat a_r2)
{
   if (mp_r2 != a_r2)
   {
      mp_r2 = a_r2;
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp00Prop>==================
// 
//  Summary: Set the value of the 'p00' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp00Prop(const vxtRTTopContext &, const vxtTypCoord &a_rp00)
{
   vxtBool Changed = VXT_FALSE;
   mp_p00.vAssign(a_rp00, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp00Prop>==================
// 
//  Summary: Set the value of the 'p00' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp00Prop(const vxtRTTopContext &, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_p00.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp01Prop>==================
// 
//  Summary: Set the value of the 'p01' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp01Prop(const vxtRTTopContext &, const vxtTypCoord &a_rp01)
{
   vxtBool Changed = VXT_FALSE;
   mp_p01.vAssign(a_rp01, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp01Prop>==================
// 
//  Summary: Set the value of the 'p01' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp01Prop(const vxtRTTopContext &, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_p01.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp10Prop>==================
// 
//  Summary: Set the value of the 'p10' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp10Prop(const vxtRTTopContext &, const vxtTypCoord &a_rp10)
{
   vxtBool Changed = VXT_FALSE;
   mp_p10.vAssign(a_rp10, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp10Prop>==================
// 
//  Summary: Set the value of the 'p10' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp10Prop(const vxtRTTopContext &, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_p10.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp11Prop>==================
// 
//  Summary: Set the value of the 'p11' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp11Prop(const vxtRTTopContext &, const vxtTypCoord &a_rp11)
{
   vxtBool Changed = VXT_FALSE;
   mp_p11.vAssign(a_rp11, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

//=================<vxtBaseClsPolygonPointsCalc::vSetp11Prop>==================
// 
//  Summary: Set the value of the 'p11' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsPolygonPointsCalc::vSetp11Prop(const vxtRTTopContext &, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_p11.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireUpdate();
   }
}

#if VXT_CFG_INTROSPECTION_SUPPORT
//=================<vxtBaseClsPolygonPointsCalc::aGetPropInfo>=================
// 
//  Summary: Get a pointer on the properties of this object.
// 
//  Return Value: A pointer to the properties of this object.
// 
//=============================================================================
vxtRTProperty * vxtBaseClsPolygonPointsCalc::aGetPropInfo()
{
   return S_PROPS;
}
#endif

#if VXT_CFG_INTROSPECTION_SUPPORT
//=================<vxtBaseClsPolygonPointsCalc::aGetPropInfo>=================
// 
//  Summary: Get a pointer on the properties and the number of properties of
//           this object.
// 
//  Return Value: A pointer to the properties of this object.
// 
//=============================================================================
const vxtRTProperty * vxtBaseClsPolygonPointsCalc::aGetPropInfo(vxtUShort &a_rNumProps)
{
   a_rNumProps = VXT_USHORT_ARRAY_SIZE(S_PROPS);
   return S_PROPS;
}
#endif

#if VXT_EDITOR_MODE
const vxtChar * vxtBaseClsPolygonPointsCalc::pGetDependentTypesDescriptor()
{
   return s_pDependentTypesDescriptor;
}
#endif




// END OF FILE

