//=============================================================================
//
// Code generated by [VAPS XT 4.0.1]
//
//=============================================================================

#ifndef VXTBASECLSPOLYGONPOINTSCALC_H
#define VXTBASECLSPOLYGONPOINTSCALC_H


#ifndef VXTCLSPOLYGONPOINTSCALC_SPEC
  #if VXT_STATIC_LIB
    #define VXTCLSPOLYGONPOINTSCALC_SPEC
  #else
    #include "vxtExport.h"
    #ifdef VXT_STATIC_LIB_WITH_EXPORTS
      #define VXTCLSPOLYGONPOINTSCALC_SPEC VXT_EXPORT_SPEC
    #else
      #ifdef  VXTCLSPOLYGONPOINTSCALC_DLL
        #define VXTCLSPOLYGONPOINTSCALC_SPEC VXT_EXPORT_SPEC
      #else
        #define VXTCLSPOLYGONPOINTSCALC_SPEC VXT_IMPORT_SPEC
      #endif
    #endif
  #endif
#endif

//=============================================================================
//                        I N C L U D E   F I L E S
//=============================================================================

#include "vxtRTCodedCalculator.h"
#include "vxtRTMacros.h"
#include "vxtRTPropIdPath.h"
#include "vxtRTTopContext.h"
#include "vxtRTTypes.h"
#include "vxtRTValue.h"
#include "vxtTypCoord.h"


//=============================================================================
//                                C L A S S
//=============================================================================

class VXTCLSPOLYGONPOINTSCALC_SPEC vxtBaseClsPolygonPointsCalc : public vxtRTCodedCalculator
{
   
   
public:

#if VXT_CFG_DBG_ERROR_MESSAGE_SUPPORT || VXT_CFG_INTROSPECTION_SUPPORT
   static const vxtChar* const CLASS_NAME;
#endif
   
   // Property IDs
   static const vxtRTPropId P1_PROP         = vxtRTCodedCalculator::NUMBER_OF_PROPS;
   static const vxtRTPropId P2_PROP         = vxtRTCodedCalculator::NUMBER_OF_PROPS + 1U;
   static const vxtRTPropId R1_PROP         = vxtRTCodedCalculator::NUMBER_OF_PROPS + 2U;
   static const vxtRTPropId R2_PROP         = vxtRTCodedCalculator::NUMBER_OF_PROPS + 3U;
   static const vxtRTPropId P00_PROP        = vxtRTCodedCalculator::NUMBER_OF_PROPS + 4U;
   static const vxtRTPropId P01_PROP        = vxtRTCodedCalculator::NUMBER_OF_PROPS + 5U;
   static const vxtRTPropId P10_PROP        = vxtRTCodedCalculator::NUMBER_OF_PROPS + 6U;
   static const vxtRTPropId P11_PROP        = vxtRTCodedCalculator::NUMBER_OF_PROPS + 7U;
   // NUMBER_OF_PROPS intentionally hides the base class constant with the same name.
   static const vxtRTPropId NUMBER_OF_PROPS = vxtRTCodedCalculator::NUMBER_OF_PROPS + 8U;

   // Operation IDs
   static const vxtUShort DOUPDATE_OPER   = vxtRTCodedCalculator::NUMBER_OF_OPERS;
   // NUMBER_OF_OPERS intentionally hides the base class constant with the same name.
   static const vxtUShort NUMBER_OF_OPERS = vxtRTCodedCalculator::NUMBER_OF_OPERS + 1U;


   struct InitData
   {
      vxtTypCoord::InitData   mp_p1;
      vxtTypCoord::InitData   mp_p2;
      vxtFloat                mp_r1;
      vxtFloat                mp_r2;
      vxtTypCoord::InitData   mp_p00;
      vxtTypCoord::InitData   mp_p01;
      vxtTypCoord::InitData   mp_p10;
      vxtTypCoord::InitData   mp_p11;
   };

   
   virtual ~vxtBaseClsPolygonPointsCalc();

   
#if VXT_CFG_SET_PROPERTY_SUPPORT
   virtual void vSetProperty(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);
#endif

   
#if VXT_CFG_OBJECT_GET_PROPERTY_SUPPORT
   virtual vxtRTValue GetProperty(const vxtRTPropIdPath &a_rIds);
#endif

   // Remove following function if vUpdate member function is missing or empty.

   virtual vxtBool HasUpdateFunction();

   const vxtTypCoord & rGetp1Prop() const
   {
      return mp_p1;
   }

   void vSetp1Prop(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);

   void vSetp1Prop(const vxtRTTopContext &a_rTopContext, const vxtTypCoord & a_rp1);

   const vxtTypCoord & rGetp2Prop() const
   {
      return mp_p2;
   }

   void vSetp2Prop(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);

   void vSetp2Prop(const vxtRTTopContext &a_rTopContext, const vxtTypCoord & a_rp2);

   vxtFloat Getr1Prop() const
   {
      return mp_r1;
   }

   void vSetr1Prop(const vxtRTTopContext &a_rTopContext, vxtFloat a_r1);

   vxtFloat Getr2Prop() const
   {
      return mp_r2;
   }

   void vSetr2Prop(const vxtRTTopContext &a_rTopContext, vxtFloat a_r2);

   const vxtTypCoord & rGetp00Prop() const
   {
      return mp_p00;
   }

   // The method vSetp00Prop() that is not called from within this class
   // should be put within #if VXT_EDITOR_MODE || VXT_CODEGEN_MODE/#endif
   void vSetp00Prop(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);

   void vSetp00Prop(const vxtRTTopContext &a_rTopContext, const vxtTypCoord & a_rp00);

   const vxtTypCoord & rGetp01Prop() const
   {
      return mp_p01;
   }

   // The method vSetp01Prop() that is not called from within this class
   // should be put within #if VXT_EDITOR_MODE || VXT_CODEGEN_MODE/#endif
   void vSetp01Prop(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);

   void vSetp01Prop(const vxtRTTopContext &a_rTopContext, const vxtTypCoord & a_rp01);

   const vxtTypCoord & rGetp10Prop() const
   {
      return mp_p10;
   }

   // The method vSetp10Prop() that is not called from within this class
   // should be put within #if VXT_EDITOR_MODE || VXT_CODEGEN_MODE/#endif
   void vSetp10Prop(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);

   void vSetp10Prop(const vxtRTTopContext &a_rTopContext, const vxtTypCoord & a_rp10);

   const vxtTypCoord & rGetp11Prop() const
   {
      return mp_p11;
   }

   // The method vSetp11Prop() that is not called from within this class
   // should be put within #if VXT_EDITOR_MODE || VXT_CODEGEN_MODE/#endif
   void vSetp11Prop(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue);

   void vSetp11Prop(const vxtRTTopContext &a_rTopContext, const vxtTypCoord & a_rp11);

   
#if VXT_CFG_INTROSPECTION_SUPPORT
   static const vxtRTProperty *aGetPropInfo(vxtUShort &a_rNumProps);
#endif

   
#if VXT_CFG_DBG_ERROR_MESSAGE_SUPPORT || VXT_CFG_INTROSPECTION_SUPPORT
   virtual const vxtChar* pGetClassName() const;
#endif

   
#if VXT_EDITOR_MODE
   static const vxtChar* pGetDependentTypesDescriptor();
#endif

   
protected:

   explicit vxtBaseClsPolygonPointsCalc(const InitData &a_rInitData);

   
   
   //-----------------------------------------------------------------------------
   // Coding Standard Deviation: SCS.LAN.CLS.INH.PROT, MISRA-C++ Rule 11-0-1
   // Description: Give subclasses access to member data by declaring protected
   //              accessors and mutators.
   // Rationale: There are few special cases in which the data members cannot
   //             be made private (e.g. custom get/set fcns, string/array properties
   //              needing to be set via streams in A661 cases). 
   //-----------------------------------------------------------------------------
   // PRQA S 2101 9
   
   vxtTypCoord mp_p1;
   vxtTypCoord mp_p2;
   vxtFloat    mp_r1;
   vxtFloat    mp_r2;
   vxtTypCoord mp_p00;
   vxtTypCoord mp_p01;
   vxtTypCoord mp_p10;
   vxtTypCoord mp_p11;

#if VXT_CFG_INTROSPECTION_SUPPORT
   virtual vxtUShort GetNumProps() const;
   virtual vxtRTProperty *aGetPropInfo();
   static vxtRTProperty S_PROPS[];
#endif

private:

   // Disallow copy
   vxtBaseClsPolygonPointsCalc( const vxtBaseClsPolygonPointsCalc& );
   vxtBaseClsPolygonPointsCalc& operator=( const vxtBaseClsPolygonPointsCalc& );

   
#if VXT_EDITOR_MODE
   static const vxtChar* s_pDependentTypesDescriptor;
#endif
};


#endif // VXTBASECLSPOLYGONPOINTSCALC_H

// END OF FILE

